cmake_minimum_required(VERSION 3.12)

project(ex001-HelloWorld)

set(CMAKE_MACOSX_RPATH 1)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}/deps")

# Path for CxxWrap cmake files:
 
find_program(PRINT_CXXWRAP_PATH print-cxxwrap-path.jl
  PATHS "${CMAKE_CURRENT_LIST_DIR}/../../buildtools")

if(PRINT_CXXWRAP_PATH STREQUAL PRINT_CXXWRAP_PATH-NOTFOUND)
  message(FATAL_ERROR "Failed to find the print-cxxwarp-path.jl build tool.")
endif()

execute_process(
  COMMAND "${PRINT_CXXWRAP_PATH}"
  OUTPUT_STRIP_TRAILING_WHITESPACE
  OUTPUT_VARIABLE CXXWRAP_PREFIX
  RESULT_VARIABLE result)

if(NOT result EQUAL 0)
  message(FATAL_ERROR "Execution of ${PRINT_CXXWRAP_PATH} failed")
endif()

list(APPEND CMAKE_PREFIX_PATH ${CXXWRAP_PREFIX})

find_package(JlCxx)
get_target_property(JlCxx_location JlCxx::cxxwrap_julia LOCATION)
get_filename_component(JlCxx_location ${JlCxx_location} DIRECTORY)
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib;${JlCxx_location}")

message(STATUS "Found JlCxx at ${JlCxx_location}")

set(WRAPIT_VERBOSITY 1 CACHE STRING "Define verbosity level of the wrapit command. An integer, 0 for a quiet mode, 1 for a normal mode, higher numbers for a verbosity that increases with the number.")

# Find wrapit command (https://github.com/grasph/wrapit), used to generate
# the wrapper code.
find_program(WRAPIT wrapit DOC "wrapit command path")
#FIXME: use REQUIRE option of find_program when migrating to cmake >= 3.18
if(WRAPIT STREQUAL WRAPIT-NOTFOUND)
  message(FATAL_ERROR "Failed to find wrapit executable - aborting")
else()
  message("Found wrapit executable: ${WRAPIT}")
endif()

set(WRAPIT_WIT_FILE "${CMAKE_SOURCE_DIR}/Hello.wit")
set(WRAPPER_MODULE "Hello")
set(WRAPPER_LIB jl${WRAPPER_MODULE})
set(WRAPPER_JULIA_PACKAGE_DIR ${WRAPPER_MODULE})
set(WRAPPER_JULIA_PACKAGE_FILE ${WRAPPER_MODULE}.jl)

# Generate the wrapper code. This is done at configure time.
execute_process(
  COMMAND "${WRAPIT}" -v "${WRAPIT_VERBOSITY}" --force --update --cmake --output-prefix "${CMAKE_BINARY_DIR}" "${WRAPIT_WIT_FILE}"
  WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
  COMMAND_ECHO STDERR
  RESULT_VARIABLE result)

if(NOT result EQUAL 0)
  message(FATAL_ERROR "Execution of wrapit failed")
endif()

# File generated by wrapit that defines two variables, WRAPIT_PRODUCTS and
# WRAPIT_INPUT, with respectively the list of produced c++ code file and
# the list of files their contents on.
include("${CMAKE_BINARY_DIR}/wrapit.cmake")

# Require reconfiguration if one of the dependency of the contents produced
# by wrapit (itself executed at configure step) changed:
set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS "${WRAPIT_DEPENDS}" "${WRAPIT_WIT_FILE}")

# Build the library.
add_library(${WRAPPER_LIB} SHARED ${WRAPIT_PRODUCTS})
set_target_properties(${WRAPPER_LIB}
  PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${WRAPPER_JULIA_PACKAGE_DIR}/deps)
target_include_directories(${WRAPPER_LIB} PRIVATE ${CMAKE_SOURCE_DIR})
target_link_libraries(${WRAPPER_LIB} JlCxx::cxxwrap_julia)

# Installation paths:
set(WRAPPER_INSTALL_DIR "share/wrapit" CACHE FILEPATH "Installation path for the test modules")
install(FILES ${CMAKE_BINARY_DIR}/${WRAPPER_JULIA_PACKAGE_DIR}/src/${WRAPPER_JULIA_PACKAGE_FILE}
  DESTINATION ${WRAPPER_INSTALL_DIR}/${WRAPPER_JULIA_PACKAGE_DIR}/src)
install(TARGETS ${WRAPPER_LIB}
  LIBRARY DESTINATION  ${WRAPPER_INSTALL_DIR}/${WRAPPER_JULIA_PACKAGE_DIR}/deps
  ARCHIVE DESTINATION ${WRAPPER_INSTALL_DIR}/${WRAPPER_JULIA_PACKAGE_DIR}/deps 
  RUNTIME DESTINATION ${WRAPPER_INSTALL_DIR}/${WRAPPER_JULIA_PACKAGE_DIR}/deps)

