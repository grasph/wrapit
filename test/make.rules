# Variable to define:
# MODULE_NAME: Julia module name. It needs to match with the .wit file base name.
# EXTRA_OBJS: in presence of c++ files to compile and link into the shared library other than the ones generated by wrapit. 

UNAME = $(shell uname)

JL_SHARE = $(shell julia -e 'print(joinpath(Sys.BINDIR, Base.DATAROOTDIR, "julia"))')
CXXFLAGS += $(patsubst -std=gnu%,,$(shell $(JL_SHARE)/julia-config.jl --cflags))
LDFLAGS  += $(shell $(JL_SHARE)/julia-config.jl --ldflags)
LDLIBS   += $(shell $(JL_SHARE)/julia-config.jl --ldlibs)

CXXWRAP_PREFIX=$(shell julia -e 'import Pkg; haskey(Pkg.dependencies(), Base.UUID("1f15a43c-97ca-5a2a-ae31-89f07a497df4")) || Pkg.add("CxxWrap"); using CxxWrap; print(CxxWrap.prefix_path())')

CXXWRAP_CPPFLAGS=-I $(CXXWRAP_PREFIX)/include -std=c++20
LDLIBS +=-L $(CXXWRAP_PREFIX)/lib -lcxxwrap_julia
CXXFLAGS += -Wno-unused-variable -Wno-unused-but-set-variable -I.

ifeq ($(UNAME),Darwin)
  SO_SUFFIX = .dylib
else
  CXXFLAGS += -fmax-errors=3
  SO_SUFFIX = .so
endif

CPPFLAGS += -MMD
WRAPIT_VERBOSITY=0

LINK.o = $(CXX) $(LDFLAGS) $(TARGET_ARCH)

.PHONY: all clean test

.PRECIOUS: $(PRODUCTS)

CXX_PRODUCTS=$(addprefix lib$(MODULE_NAME)/src/, jl$(MODULE_NAME).cxx)
OBJS=$(patsubst lib$(MODULE_NAME)/src/%,lib$(MODULE_NAME)/build/%, $(addsuffix .o, $(basename $(CXX_PRODUCTS)))) $(EXTRA_OBJS)
DEPS=$(patsubst %.o,%.d, $(OBJS))

PRODUCTS=lib$(MODULE_NAME)/libjl$(MODULE_NAME)$(SO_SUFFIX) $(CXX_PRODUCTS) $(addprefix lib$(MODULE_NAME)/src/, jl$(MODULE_NAME).h) $(MODULE_NAME)/src/$(MODULE_NAME).jl

all: $(PRODUCTS)

clean:
	-$(RM) -r $(PRODUCTS) lib$(MODULE_NAME)/build jl$(MODULE_NAME)-report.txt $(OBJS) $(DEPS)
	[ -d lib$(MODULE_NAME)/src ] && cd lib$(MODULE_NAME)/src && $(RM) $(file < lib$(MODULE_NAME)/src/generated_cxx) dbg_msg.h  generated_cxx  Wrapper.h || true
	-rmdir -p lib$(MODULE_NAME)/src $(MODULE_NAME)/src 2>/dev/null || true

lib$(MODULE_NAME)/src/jl%.cxx: %.wit $(WRAPIT_INPUTS)
	wrapit -v $(WRAPIT_VERBOSITY) --force $<

lib$(MODULE_NAME)/build/%.o: lib$(MODULE_NAME)/src/%.cxx
	[ -d lib$(MODULE_NAME)/build ] || mkdir lib$(MODULE_NAME)/build
	$(COMPILE.cc) $(CXXWRAP_CPPFLAGS) -o $@ $<

lib$(MODULE_NAME)/libjl%$(SO_SUFFIX): $(OBJS)
	$(LINK.o) -o $@ --shared -fPIC $^ $(LDLIBS)
	touch $(MODULE_NAME)/src/$(MODULE_NAME).jl

echo_%:
	 @echo $*=$($*)

test:
	$(MAKE) all && . ./setup.sh && julia run$(MODULE_NAME).jl

-include $(DEPS)

